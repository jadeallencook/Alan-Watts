{"version":3,"sources":["assets/white-logo.png","components/Header.tsx","components/Youtube.tsx","components/Licensing.tsx","components/About.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","src","Logo","alt","href","rel","target","Youtube","useState","currentVideo","setVideo","title","allow","videos","map","video","key","style","backgroundImage","onClick","Licensing","About","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,wC,8bCmB5BC,EAfU,WACrB,OACI,yBAAKC,UAAU,0BACX,8BACA,6BACI,uBAAGA,UAAU,uBAAb,yBACA,yBAAKC,IAAKC,IAAMF,UAAU,mBAAmBG,IAAI,yBACjD,6BAAM,6BACN,uBAAGC,KAAK,yDAAyDJ,UAAU,kBAAkBK,IAAI,sBAAsBC,OAAO,UAA9H,mBACA,uBAAGF,KAAK,6BAA6BJ,UAAU,kBAAkBK,IAAI,sBAAsBC,OAAO,UAAlG,8B,sBCeDC,EAxBW,WAAO,IAAD,EACKC,mBAAS,eADd,mBACrBC,EADqB,KACPC,EADO,KAG5B,OACI,yBAAKV,UAAU,WACX,4DACA,4BAAQW,MAAM,sBAAsBV,IAAG,wCAAmCQ,GAAgBG,MAAM,4EAChG,6BAEQC,EAAOC,KAAI,SAAAC,GACP,OACI,yBAAKf,UAAU,QAAQgB,IAAKD,EAAOE,MAAO,CACtCC,gBAAgB,OAAD,4CAAuCH,EAAvC,gBAChBI,QAAS,WACRT,EAASK,YCmB1BK,G,MAlCa,WACxB,OACI,yBAAKpB,UAAU,aACX,qEACA,4FACA,4BACI,oKACA,qGACA,0MACA,4MACA,gMACA,6KACA,+HAEJ,gEACA,yHACA,4BACI,6FACA,8PACA,6GACA,uRACA,4GAEJ,yEACA,qLACA,4BACI,kKACA,mNACA,iJCjBDqB,G,MAXS,WACpB,OACI,yBAAKrB,UAAU,SACX,6BACI,uEACA,gmBCUDsB,G,MAdU,WACrB,OACI,yBAAKtB,UAAU,UACX,6BACI,6BACI,yBAAKC,IAAKC,IAAMC,IAAI,+BAClB,6BACF,uDADE,yBCYPoB,EAZO,WACpB,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5d8dcd0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/white-logo.10bf673e.png\";","import React from 'react';\nimport './Header.scss';\nimport Logo from '../assets/white-logo.png';\n\nconst Header: React.FC = () => {\n    return (\n        <div className=\"Header animated fadeIn\">\n            <div></div>\n            <div>\n                <p className=\"animated fadeInDown\">The recorded works of</p>\n                <img src={Logo} className=\"animated flipInX\" alt=\"alan watts signature\" />\n                <br /><br />\n                <a href=\"https://alan-watts-electronic-university.myshopify.com\" className=\"animated fadeIn\" rel=\"noopener noreferrer\" target=\"_blank\">Audio Downloads</a>\n                <a href=\"https://www.alanwatts.org/\" className=\"animated fadeIn\" rel=\"noopener noreferrer\" target=\"_blank\">Alan Watts Organization</a>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import React, { useState } from 'react';\nimport './Youtube.scss';\nimport videos from '../assets/youtube-videos.json';\n\nconst Youtube: React.FC = () => {\n    const [currentVideo, setVideo] = useState('7rOIjEhhgNA');\n\n    return (\n        <div className=\"Youtube\">\n            <h2>Explore Our Video Collection</h2>\n            <iframe title=\"alan watts playlist\" src={`https://www.youtube.com/embed/${currentVideo}`} allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"></iframe>\n            <div>\n                {\n                    videos.map(video => {\n                        return (\n                            <div className=\"thumb\" key={video} style={{\n                                backgroundImage: `url(${`https://img.youtube.com/vi/${video}/0.jpg`})`\n                            }} onClick={() => {\n                                setVideo(video);\n                            }}></div>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Youtube;","import React from 'react';\nimport './Licensing.scss';\n\nconst Licensing: React.FC = () => {\n    return (\n        <div className=\"Licensing\">\n            <h2>Creative Film Use of Alan Watts Audio</h2>\n            <h3>Licensing For Non-Profit, Educational and Inspirational Use:</h3>\n            <ul>\n                <li>Short filmmakers producing non-commercial educational or inspirational content may use one sample clip of up to 5 minutes in length.</li>\n                <li>The film must be original and not violate visual or music copyrights.</li>\n                <li>Maximum use is limited to three clips total per channel or platform, and additional clips or use in a full-length film or music video will be considered a commercial use.</li>\n                <li>Please send a copy to licensing@alanwatts.com for approval. Also, let us know if you would like your film to be considered for the Alan Watts Organization Channel Playlist.</li>\n                <li>The original talk title must be credited in the film and initially visible in posting information, with a link to the alanwatts.org website for curious viewers.</li>\n                <li>Student projects are generally considered inspirational or educational content upon review. Please send a final or rough cut to for approval.</li>\n                <li>Creative use audio may not be used for the promotion of any product or service, or for profit.</li>\n            </ul>\n            <h3>Musical Use of Alan Watts Audio:</h3>\n            <p>Use in a musical composition or music video to be posted on streaming or online platforms:</p>\n            <ul>\n                <li>Online use considered promotional and requires a use license.</li>\n                <li>Once licensed artists may post their composition indefinitely, however, additional licensing is required if the piece is to be used in a film or music video, or as part of a commercial product, service, or brand promotion.</li>\n                <li>Please send a copy or your composition to licensing@alanwatts.com for review.</li>\n                <li>Also please include the source (where you found the audio) as well as the length you would like to use as licensing fees are calculated for by ten seconds to be included, and let us know if you are signed with a label or are an independent artist.</li>\n                <li>We will be back in touch within two days with a quote or further questions.</li>\n            </ul>\n            <h3>Commercial Licensing of Alan Watts Audio:</h3>\n            <p>Licensing for commercial use or any use that promotes a company, product, or service, or uses more content than provided for under Creative Use above:</p>\n            <ul>\n                <li>Please submit a rough sample, storyboard or other proof of concept, including all brand associations and your contact information.</li>\n                <li>Outline the proposed length of the licensing term, the delivery platform (s), and the source and length of the audio sample. (e.g. five years, Spotify, Myth of Myself, 2:10- 2:40)</li>\n                <li>Please send your proposal to licensing@alanwatts.com and we will respond with a quote or follow-up questions.</li>\n            </ul>\n        </div>\n    );\n}\n\nexport default Licensing;","import React from 'react';\nimport './About.scss';\n\nconst About: React.FC = () => {\n    return (\n        <div className=\"About\">\n            <div>\n                <h2>Origins of the Alan Watts Audio Project</h2>\n                <p>The Alan Watts project began as the Electronic University back in 1972 when Alan Watts and his son Mark Watts were reviewing Alan's recordings for courses to create a \"university without walls\". With the release of the original eight audio courses in 1973, the University became a pioneer offering the initial courses on cassette and LP.  These compilations today form the core of the Essential Lecture and Eastern Wisdom collections. Late in 1973 Alan Watts returned from a speaking tour abroad a wonderful but tiring and asked \"How can I do all of this without my body?\"</p>\n            </div>\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport './Footer.scss';\nimport Logo from '../assets/white-logo.png';\n\nconst Footer: React.FC = () => {\n    return (\n        <div className=\"Footer\">\n            <div>\n                <div>\n                    <img src={Logo} alt=\"alan watts signature logo\" />\n                </div><div>\n                    <b>Alan Watts Audio Project</b> | Copyright 2020\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport './App.scss';\nimport 'animate.css';\n\nimport Header from './components/Header';\nimport Youtube from './components/Youtube';\nimport Licensing from './components/Licensing';\nimport About from './components/About';\nimport Footer from './components/Footer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Youtube />\n      <About />\n      <Licensing />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}